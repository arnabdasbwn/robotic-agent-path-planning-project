currentPosition = startPosition
while(goalNotFound)
	if validPosition(currentPosition.up)
		and not visited(currentPosition.up)
		and currentPosition.up.f == 0
	then
		currentPosition.up.previous = s
		computeAStar(currentPosition.up)
		priorityQueue.push(currentPosition.up)
	elif validPosition(currentPosition.down)
		and not visited(currentPosition.down)
		and currentPosition.down.f == 0
	then
		currentPosition.down.previous = s
		computeAStar(currentPosition.down)
		priorityQueue.push(currentPosition.down)
	elif validPosition(currentPosition.left)
		and not visited(currentPosition.left)
		and currentPosition.left.f == 0
	then
		currentPosition.left.previous = s
		computeAStar(currentPosition.left)
		priorityQueue.push(currentPosition.left)
	elif validPosition(currentPosition.right)
		and not visited(currentPosition.right)
		and currentPosition.right.f == 0
	then
		currentPosition.right.previous = s
		computeAStar(currentPosition.right)
		priorityQueue.push(currentPosition.right)
	end if

solution.add(goal)
while (currentPosition.previous)
	solution.add(currentPosition.previous)

solution = solution.reverse()

=====================================================================
Into to A*



A* (Pronounced "A Star") is an algorithm for searching for a path in an efficient way. It takes concepts from Dijkstra's shortest path algorithm and adds distance remaining to goal as an added heuristic. If we consider the distance traveled so far (Just as Dijkstra's does) and set that into a value named 'g' and the euclidian distance to the goal assuming no obsticles in the way to a value named 'h', then our heuristic can be defined as 'f' where:

f = g + h
or
"A Star Heuristic" = "Distance traveled so far" + "Distance directly to goal from new position"

= Problems
- A* requires a discrete environment, any continuous environment must be discretized into a set of waypoints and connections between them.
- In the continous A*, because the target may not be at a waypoint, if a waypoint is almost halfway between agent and target, but closer to the target further from the agent, the agent may walk passed the target to the waypoint nearest to the target and then come back to the target. It would be possible to avoid this by checking if there is a clear path to the target, but then it could not be guarnteed that the agent does not brush against the wall enroute to the target.
